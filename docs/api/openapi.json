{
  "openapi": "3.0.3",
  "info": {
    "title": "ShopXperience API",
    "description": "Multi-tenant Point of Sale System API",
    "version": "1.0.0",
    "contact": {
      "name": "ShopXperience Support",
      "email": "support@shopxperience.com"
    }
  },
  "servers": [
    {
      "url": "https://api.shopxperience.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "role": { "type": "string", "enum": ["admin", "manager", "cashier"] },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "first_name": { "type": "string" },
          "last_name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phone": { "type": "string" },
          "address": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "sku": { "type": "string" },
          "price": { "type": "number", "format": "decimal" },
          "cost": { "type": "number", "format": "decimal" },
          "category": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "address": { "type": "string" },
          "phone": { "type": "string" },
          "tax_rate": { "type": "number", "format": "decimal" },
          "pricing_multiplier": { "type": "number", "format": "decimal" },
          "timezone": { "type": "string" },
          "currency": { "type": "string" },
          "is_active": { "type": "boolean" }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "customer_id": { "type": "integer" },
          "location_id": { "type": "integer" },
          "total_amount": { "type": "number", "format": "decimal" },
          "tax_amount": { "type": "number", "format": "decimal" },
          "discount_amount": { "type": "number", "format": "decimal" },
          "payment_method": { "type": "string" },
          "status": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" }
        }
      }
    }
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register new user",
        "description": "Create a new user account (admin only)",
        "tags": ["Authentication"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "email", "password"],
                "properties": {
                  "username": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "minLength": 6 },
                  "role": { "type": "string", "enum": ["admin", "manager", "cashier"], "default": "cashier" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "409": { "$ref": "#/components/responses/ConflictError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "token": { "type": "string" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/auth/mfa/setup": {
      "post": {
        "summary": "Setup MFA",
        "description": "Generate MFA secret and QR code",
        "tags": ["Authentication"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "MFA setup initiated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "secret": { "type": "string" },
                    "qrCode": { "type": "string" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/auth/mfa/verify": {
      "post": {
        "summary": "Verify and enable MFA",
        "description": "Verify MFA token and enable MFA for user",
        "tags": ["Authentication"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "secret"],
                "properties": {
                  "token": { "type": "string" },
                  "secret": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MFA enabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/auth/mfa/verify-login": {
      "post": {
        "summary": "Verify MFA for login",
        "description": "Complete MFA verification for login",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tempToken", "token"],
                "properties": {
                  "tempToken": { "type": "string" },
                  "token": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful with MFA",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "token": { "type": "string" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/customers": {
      "get": {
        "summary": "Get all customers",
        "description": "Retrieve paginated list of customers with optional search",
        "tags": ["Customers"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "search", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Customers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customers": { "type": "array", "items": { "$ref": "#/components/schemas/Customer" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer" },
                        "page": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "post": {
        "summary": "Create customer",
        "description": "Create a new customer",
        "tags": ["Customers"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["first_name", "last_name"],
                "properties": {
                  "first_name": { "type": "string" },
                  "last_name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "phone": { "type": "string" },
                  "address": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "customer": { "$ref": "#/components/schemas/Customer" }
                  }
                }
              }
            }
          },
          "409": { "$ref": "#/components/responses/ConflictError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/customers/{id}": {
      "get": {
        "summary": "Get customer by ID",
        "description": "Retrieve a specific customer",
        "tags": ["Customers"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Customer retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customer": { "$ref": "#/components/schemas/Customer" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "summary": "Update customer",
        "description": "Update customer information",
        "tags": ["Customers"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": { "type": "string" },
                  "last_name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "phone": { "type": "string" },
                  "address": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "customer": { "$ref": "#/components/schemas/Customer" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "409": { "$ref": "#/components/responses/ConflictError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "summary": "Delete customer",
        "description": "Delete a customer",
        "tags": ["Customers"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Get all products",
        "description": "Retrieve paginated list of products with optional filters",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          { "name": "search", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer" },
                        "page": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "post": {
        "summary": "Create product",
        "description": "Create a new product (admin/manager only)",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "sku", "price"],
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "sku": { "type": "string" },
                  "price": { "type": "number", "format": "decimal" },
                  "cost": { "type": "number", "format": "decimal" },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "product": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "409": { "$ref": "#/components/responses/ConflictError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Get product by ID",
        "description": "Retrieve a specific product",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "put": {
        "summary": "Update product",
        "description": "Update product information (admin/manager only)",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "sku": { "type": "string" },
                  "price": { "type": "number", "format": "decimal" },
                  "cost": { "type": "number", "format": "decimal" },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "product": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "409": { "$ref": "#/components/responses/ConflictError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "delete": {
        "summary": "Delete product",
        "description": "Delete a product (admin/manager only)",
        "tags": ["Products"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "summary": "Get all transactions",
        "description": "Retrieve paginated list of transactions with optional filters",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "location_id", "in": "query", "schema": { "type": "integer" } },
          { "name": "customer_id", "in": "query", "schema": { "type": "integer" } },
          { "name": "start_date", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "end_date", "in": "query", "schema": { "type": "string", "format": "date" } }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": { "type": "array", "items": { "$ref": "#/components/schemas/Transaction" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer" },
                        "page": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "post": {
        "summary": "Create transaction",
        "description": "Create a new transaction (cash payment only)",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["location_id", "items", "payment_method"],
                "properties": {
                  "customer_id": { "type": "integer" },
                  "location_id": { "type": "integer" },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["product_id", "quantity"],
                      "properties": {
                        "product_id": { "type": "integer" },
                        "quantity": { "type": "integer" }
                      }
                    }
                  },
                  "payment_method": { "type": "string", "enum": ["cash", "check", "other"] },
                  "discount_amount": { "type": "number", "format": "decimal", "default": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "transaction": { "$ref": "#/components/schemas/Transaction" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/transactions/{id}": {
      "get": {
        "summary": "Get transaction by ID",
        "description": "Retrieve a specific transaction with items",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": { "$ref": "#/components/schemas/Transaction" }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/payments/create-payment-intent": {
      "post": {
        "summary": "Create payment intent",
        "description": "Create Stripe payment intent for card payments",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount"],
                "properties": {
                  "amount": { "type": "number", "format": "decimal" },
                  "currency": { "type": "string", "default": "usd" },
                  "payment_method_types": { "type": "array", "items": { "type": "string" }, "default": ["card"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_secret": { "type": "string" },
                    "payment_intent_id": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/payments/confirm-payment": {
      "post": {
        "summary": "Confirm payment and create transaction",
        "description": "Confirm Stripe payment and create transaction record",
        "tags": ["Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["payment_intent_id", "location_id", "items"],
                "properties": {
                  "payment_intent_id": { "type": "string" },
                  "customer_id": { "type": "integer" },
                  "location_id": { "type": "integer" },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["product_id", "quantity"],
                      "properties": {
                        "product_id": { "type": "integer" },
                        "quantity": { "type": "integer" }
                      }
                    }
                  },
                  "discount_amount": { "type": "number", "format": "decimal", "default": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment confirmed and transaction created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "transaction": { "$ref": "#/components/schemas/Transaction" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/reports/sales": {
      "get": {
        "summary": "Sales report",
        "description": "Generate sales analytics report",
        "tags": ["Reports"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "start_date", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "end_date", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "location_id", "in": "query", "schema": { "type": "integer" } },
          { "name": "group_by", "in": "query", "schema": { "type": "string", "enum": ["day", "month", "year"], "default": "day" } }
        ],
        "responses": {
          "200": {
            "description": "Sales report generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total_transactions": { "type": "integer" },
                        "total_sales": { "type": "number" },
                        "avg_transaction": { "type": "number" },
                        "total_profit": { "type": "number" },
                        "profit_margin": { "type": "number" },
                        "growth_rate": { "type": "number" }
                      }
                    },
                    "data": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/reports/inventory": {
      "get": {
        "summary": "Inventory report",
        "description": "Generate inventory status report",
        "tags": ["Reports"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "location_id", "in": "query", "schema": { "type": "integer" } },
          { "name": "low_stock_only", "in": "query", "schema": { "type": "boolean", "default": false } }
        ],
        "responses": {
          "200": {
            "description": "Inventory report generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total_items": { "type": "integer" },
                        "total_value": { "type": "number" },
                        "low_stock_items": { "type": "integer" },
                        "inventory_turnover": { "type": "number" },
                        "avg_inventory_level": { "type": "number" }
                      }
                    },
                    "inventory": { "type": "array", "items": { "type": "object" } }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    },
    "/api/locations": {
      "get": {
        "summary": "Get all locations",
        "description": "Retrieve all locations for the tenant",
        "tags": ["Locations"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": { "type": "array", "items": { "$ref": "#/components/schemas/Location" } }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      },
      "post": {
        "summary": "Create location",
        "description": "Create a new location (admin/manager only)",
        "tags": ["Locations"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "address"],
                "properties": {
                  "name": { "type": "string" },
                  "address": { "type": "string" },
                  "phone": { "type": "string" },
                  "tax_rate": { "type": "number", "format": "decimal", "default": 0 },
                  "pricing_multiplier": { "type": "number", "format": "decimal", "default": 1 },
                  "operating_hours": { "type": "object" },
                  "timezone": { "type": "string", "default": "UTC" },
                  "currency": { "type": "string", "default": "USD" },
                  "is_active": { "type": "boolean", "default": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "location": { "$ref": "#/components/schemas/Location" }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalError" }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequestError": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "InternalError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      }
    }
  }
}